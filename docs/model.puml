@startuml

title Domain Model

class Match {
  -MatchId matchId (1..1)
  -PlayerDefinition player1 (1..1)
  -PlayerDefinition player2 (1..1)
  -MatchEvent events (1..n)
  -SetsToWin setsToWin (1..1)
  --
  +Score getScore()
}

class MatchId {
    -UUID value (1..1)
}

enum SetsToWin {
    TWO (2)
    THREE (3)
}

class MatchEvent {
    -LocalDateTime timestamp (1..1)
    -InstantId instantId (1..1)
    -MatchEventType type (1..1)
}

enum MatchEventType {
    MATCH_CONFIRMED
    MATCH_STARTED
    POINT_PLAYER1
    POINT_PLAYER2
    DEUCE
    ADVANTAGE_IN_PLAYER1
    ADVANTAGE_IN_PLAYER2
    GAME_PLAYER1
    GAME_PLAYER2
    TIE_BREAK
    SET_PLAYER1
    SET_PLAYER2
    PLAYER1_WON
    PLAYER2_WON
    MATCH_CANCELLED
}

class Score {
    -Set sets (1..n)
    -MatchPoints player1 (1..1)
    -MatchPoints player2 (1..1)
}

class MatchPoints {
    -int value(1..1, 0 <= x <= 2|3))
}

class Game {
    -GamePoints player1 (1..1)
    -GamePoints player2 (1..1)
}

enum GamePoints {
    LOVE (0)
    FIFTEEN (15)
    THIRTY (30)
    FOURTY (40)
    ADVANTAGE_IN (40A)
}

class Set {
    -Game game(1..n)
    -SetPoints player1(1..1)
    -SetPoints player2(1..1)
}

class SetPoints {
    -int value(1..1, >= 0)
}

class PlayerDefinition {
    -Name name (1..1)
    -PlayerId playerId (1..1)
}

class Name {
    -String value (1..1)
}

class PlayerId {
    -String value (1..1)
}

class InstantId {
    -int value (1..1, >= 0)
}

Match -down-> MatchId
Match -down-> MatchEvent
Match -left-> SetsToWin
MatchEvent -left-> MatchEventType
MatchEvent -down-> InstantId

Match .right-> Score
Score -down-> Set
Score -right-> MatchPoints
Set -down-> Game
Set -down-> SetPoints
Game -down-> GamePoints

Match -down-> PlayerDefinition
PlayerDefinition -down-> Name
PlayerDefinition -down-> PlayerId
@enduml
